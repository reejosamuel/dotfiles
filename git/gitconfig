[alias]
  exec = ! "exec"
  st = status -sb
  br = branch -vv
  bra = branch -vv --all
  bed = branch --edit-description
  aa = add --all :/
  ap = add --patch # allows to stage just hunks
  rp = reset --patch # undo staged hunks
  ci = commit -v
  ca = commit --amend -v
  save = commit -a -m "Save"
  cm = checkout master
  corb = "!f() { git checkout -tb $1 origin/$1; }; f"
  di = diff
  ds = diff --staged
  dis = diff --stat
  diw = diff --color-words
  dc = diff --cached
  dcs = diff --cached --stat
  dcw = diff --cached --color-words
  dh = diff HEAD~
  dhs = diff HEAD~ --stat
  dhw = diff HEAD~ --color-words
  du = diff @{u}...
  dus = diff @{u}... --stat
  duw = diff @{u}... --color-words
  grp = grep -C 1
  ff = merge --ff-only
  noff = merge --no-ff
  fa = fetch --all --tags --prune
  pull = pull --rebase
  rba = rebase --abort
  rbc = rebase --continue
  publish = ! "zz() { git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD); }; zz"
  count = diff --stat "4b825dc642cb6eb9a060e54bf8d69288fbee4904" # hash of empty tree
  credit = shortlog -sn
  linecredit = ! "lc() { git ls-tree --name-only -z -r HEAD | xargs -0 -n1 git diff --no-index --numstat /dev/null 2>/dev/null | grep -v '^-' | cut -f 3- | cut -d ' ' -f 3- | xargs -n1 git blame --line-porcelain | grep '^author ' | cut -d ' ' -f 2- | sort | uniq -c | sort -nr; }; lc"
  cc = rev-list HEAD --count
  cca = rev-list --all --count
  lg = log -p
  gr = log --graph --format=compact # graph
  grl = log --graph --format=line # graph line
  grd = log --graph --format=detail # graph detail
  gra = log --graph --format=compact --all # graph all
  gral = log --graph --format=line --all # graph all line
  grad = log --graph --format=detail --all # graph all in detail
  sf = show --format=fuller
  sfw = show --format=fuller --color-words
  sfs = show --format=fuller --stat
  info = ! "inf() { if git rev-parse ${1} >/dev/null 2>&1; then git cat-file -p $(git rev-parse ${1}); else echo Invalid object; fi }; inf"
  cleanall = clean -fdx # this is dangerous, so it's intentionally long to type
  update-submodules = submodule update --init --recursive
  upgrade-submodules = submodule update --init --remote
  empty-tree-hash = hash-object -t tree /dev/null
  root = rev-parse --show-toplevel
  ctags = ! "ctg() { trap \"rm -f .git/tags.$$\" EXIT; ctags --tag-relative -Rf.git/tags.$$ --exclude=.git; mv .git/tags.$$ .git/tags; }; ctg"
  tar = ! "tar() { git archive --format tar --prefix=\"${PWD##*/}/\" HEAD -o ${1}; }; tar"
  targz = ! "targz() { git archive --format tar.gz --prefix=\"${PWD##*/}/\" HEAD -o ${1}; }; targz"
  zip = ! "zip() { git archive --format zip --prefix=\"${PWD##*/}/\" HEAD -o ${1}; }; zip"
  stash-rename = "!_() { rev=$(git rev-parse $1) && git stash drop $1 || exit 1 ; git diff-index --quiet HEAD; s=$?; [ $s != 0 ] && git stash save \"tmp stash from stash-rename\"; git stash apply $rev && shift && git stash save \"$@\" && [ $s != 0 ] && git stash pop stash@{1}; }; _"
  oldest-ancestor = !zsh -c 'diff -u <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | sed -ne \"s/^ //p\" | head -1' -
  undo = reset --soft HEAD^
  # GIT_AUTHOR_NAME='Newname'
  # GIT_AUTHOR_EMAIL='new@email'
  # GIT_COMMITTER_NAME='Newname'
  # GIT_COMMITTER_EMAIL='new@email'
  # git change-commits GIT_AUTHOR_NAME "old name" "new name"
  # git change-commits GIT_AUTHOR_EMAIL "old@email.com" "new@email.com" -- -10
  # git change-commits GIT_AUTHOR_EMAIL "old@email.com" "new@email.com" -- -10

  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ $`echo $VAR` = \\\"$OLD\\\" ]]; then export $VAR=\\\"$NEW\\\"; fi\" $@; }; f "

[diff]
  mnemonicPrefix = true
  wordRegex = "[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+"
	algorithm = patience

[diff "pdf"]
  textconv = pdfinfo

[difftool "image_diff"]
  cmd = compare $REMOTE $LOCAL png:- | montage -geometry +4+4 -label "original" $LOCAL -label "diff" - -label "changed" $REMOTE output.png

[color]
  diff = auto
  status = auto
  branch = auto
  ui = auto

[color "grep"]
  match = cyan bold
  selected = blue
  context = normal
  filename = magenta
  linenumber = green
  separator = yellow
  function = blue

[color "status"]
  added = green
  changed = yellow
  untracked = cyan

[color "branch"]
  current = green reverse
  local = cyan
  remote = magenta

[pretty]
  line = "%C(auto)%h%d %s %C(yellow)by %C(blue)%an %C(green)%ar"
  compact = "%C(auto)%h %s %C(green)%ar%n %C(auto)%d%n"
  detail = "%C(auto)%h %s%n  %C(yellow)by %C(blue)%an %C(magenta)<%ae> [%G?] %C(green)%ar%n %C(auto)%d%n"

[merge]
  defaultToUpstream = true
  tool = vimdiff

[mergetool]
  keepBackup = false

[grep]
  lineNumber = true

[advice]
  detachedHead = false

[user]
	name = Reejo Samuel
	email = m@reejosamuel.com

[core]
	excludesfile = /Users/reejosamuel/.gitignore_global
  editor = "/usr/local/bin/code --wait"
	pager = diff-so-fancy | less --tabs=4 -RFX
	attributesfile = ~/.gitattributes
	commitGraph = true

[credential]
	helper = store --file /opt/dev/var/private/git_credential_store

# upstream - push the current branch to its upstream branch...
# simple - like upstream, but refuses to push if the upstream branchâ€™s name is different from the local one...
# current - push the current branch to a branch of the same name.
[push]
  default = simple

[rerere]
	enabled = true

[commit]
	gpgsign = true

[protocol]
	version = 2

[gc]
	writeCommitGraph = true

[gpg]
	program = /usr/local/bin/gpg

